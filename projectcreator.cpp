#include "projectcreator.h"
#include "ui_projectcreator.h"

#include <QDebug>

ProjectCreator::ProjectCreator(MainWindow *parent) :
    QDialog(parent),
    ui(new Ui::ProjectCreator)
{
    ui->setupUi(this);
    p = parent;

    ui->lblTitle->setBuddy(ui->txtTitle);
    ui->lblPath->setBuddy(ui->txtPath);
    ui->lblTileHeight->setBuddy(ui->cmbTileHeight);
    ui->lblTileWidth->setBuddy(ui->cmbTileWidth);

    QObject::connect(ui->chkEnableGFX, SIGNAL(toggled(bool)), this, SLOT(enableGFXWidgets()));
    ui->txtPath->setText(QDir::currentPath().trimmed());
    /*if (projectFile.isOpen())
        if(QMessageBox::information(this, "Close Project", "Are you sure you want to close the active project?", QMessageBox::Yes, QMessageBox::No) != QMessageBox::Yes)
            return;*/


}

ProjectCreator::~ProjectCreator()
{
    delete ui;
}

void ProjectCreator::enableGFXWidgets(){
    ui->cmbTileHeight->setEnabled(ui->chkEnableGFX->isChecked());
    ui->cmbTileWidth->setEnabled(ui->chkEnableGFX->isChecked());
}

void ProjectCreator::buildProject(QString projectName){
    //QString projectName = "";//QFileDialog::getSaveFileName(this, "New Project", QDir::currentPath() /*+ "/projects/"*/, "Mirage Project File(*.mpro)");
    QFile tempProject(projectName);
    if (tempProject.open(QIODevice::WriteOnly | QIODevice::Text | QIODevice::Truncate)){
        QTextStream writer(&tempProject);
        writer << "<MirageProject>" << endl;
        writer << "<ProjectTitle>" << endl;
        writer << ui->txtTitle->text().trimmed() << endl;
        writer << "</ProjectTitle>" << endl;
        writer << "<TextSegment>" << endl;
        if (ui->chkAutoGenerateMain->isChecked()){
             writer << "<MainFile>" << endl;
             writer << "main.mtxt" << endl;
             writer << "</MainFile>" << endl;
        }
        writer << "</TextSegment>" << endl;
        writer << "<DataSegment>" << endl;
        if (ui->chkAutoGenerateData->isChecked()){
            writer << "<Data>" << endl;
            writer << "data.mdat" << endl;
            writer << "</Data>" << endl;
        }
        writer << "</DataSegment>" << endl;
        writer << "<Configure>" << endl;
        if(ui->chkEnableGFX->isChecked()){
            writer << "<EnableGFX>" << endl;
            writer << "true" << endl;
            writer << "</EnableGFX>" << endl;
            writer << "<TileMapHeight>" << endl;
            writer << ui->cmbTileHeight->currentText() << endl;
            writer << "</TileMapHeight>" << endl;
            writer << "<TileMapWidth>" << endl;
            writer << ui->cmbTileWidth->currentText() << endl;
            writer << "</TileMapWidth>" << endl;

        }else{
            writer << "<EnableGFX>" << endl;
            writer << "false" << endl;
            writer << "</EnableGFX>" << endl;
            writer << "<TileMapHeight>" << endl;
            writer << "4" << endl;
            writer << "</TileMapHeight>" << endl;
            writer << "<TileMapWidth>" << endl;
            writer << "4" << endl;
            writer << "</TileMapWidth>" << endl;
        }
        writer << "</Configure>" << endl;
        writer << "</MirageProject>";
        tempProject.close();
        p->closeProject();
        p->openProjectFile(projectName);
    }else
        QMessageBox::critical(this, "Error", "Could not create the project " + projectName);
}

void ProjectCreator::on_btnBrowse_clicked(){
    QString dir = QFileDialog::getExistingDirectory(this, "Select Project Path", QDir::currentPath(), QFileDialog::ShowDirsOnly | QFileDialog::DontResolveSymlinks | QFileDialog::DontUseCustomDirectoryIcons);
    if (dir.trimmed() != "")
        ui->txtPath->setText(dir);
}

void ProjectCreator::on_btnCreate_clicked(){
    QString projectTitle = ui->txtTitle->text().trimmed();
    if (projectTitle == ""){
        QMessageBox::critical(this, "Error", "Project title cannot be empty");
        return;
    }

    QRegExp fileValidator("^[A-Za-z0-9_\\@\\$.\\s]*$");
    if (fileValidator.indexIn(projectTitle) == -1){
        QMessageBox::critical(this, "Invalid Project Title", "The project title contains invalid characters");
        return;
    }


    QDir dir(ui->txtPath->text().trimmed());
    if(dir.isReadable()){
        if (p->hasOpenProject()){
            if(QMessageBox::question(this, "Close Project", "Are you sure you want to close the active project?", QMessageBox::Yes, QMessageBox::No) != QMessageBox::Yes)
                return;
        }
        QDir tempDir(dir.absolutePath() + "/" + projectTitle);
        if (tempDir.isReadable()){
            QMessageBox::critical(this, "Project Directory Already Exists", "A folder with the same project title already exists");
            return;
        }
        if(dir.mkdir(projectTitle)){
            if (ui->chkAutoGenerateMain->isChecked()){
                QFile mainFile(tempDir.absolutePath() + "/main.mtxt");
                if (mainFile.open(QIODevice::ReadWrite)){
                   mainFile.close();
                }else{
                    QMessageBox::critical(this, "Error", "Error creating the main text file" + QString("\n") + mainFile.errorString());
                    dir.rmdir(projectTitle);
                    return;
                }
            }
            if (ui->chkAutoGenerateData->isChecked()){
                QFile dataFile(tempDir.absolutePath() + "/data.mdat");
                if (dataFile.open(QIODevice::ReadWrite)){
                   dataFile.close();
                }else{
                    QMessageBox::critical(this, "Error", "Error creating the data file");
                    dir.rmdir(projectTitle);
                    return;
                }
            }
            QString fileName = tempDir.absolutePath() + "/" + projectTitle + ".mpro";
            buildProject(fileName);
            this->hide();
        }else
            QMessageBox::critical(this, "Error", "Could not create the project directory");

    }else
        QMessageBox::critical(this, "Error", "The selected directory is not readable");


}
